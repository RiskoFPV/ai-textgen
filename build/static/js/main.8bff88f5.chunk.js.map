{"version":3,"sources":["Components/InputWindow.js","Components/OutputWindow.js","Components/GenerateTextButton.js","App.js","reportWebVitals.js","index.js"],"names":["InputWindow","onChangeInput","noValidate","autoComplete","TextField","id","label","multiline","rows","fullWidth","placeholder","variant","onChange","OutputWindow","text","disabled","value","GenerateTextButton","onButtonPress","loading","Button","color","onClick","CircularProgress","App","classes","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","palette","secondary","useStyles","useState","input","setInput","output","setOutput","setLoading","apikey","setApikey","className","Grid","container","item","xs","event","target","e","console","log","requestOptions","method","headers","body","JSON","stringify","prompt","temperature","fetch","then","response","json","data","generation","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bff88f5.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nconst InputWindow = ( { onChangeInput  }) => {\n  return (\n        <form noValidate autoComplete=\"off\">           \n          <div>\n            <TextField\n              id=\"filled-multiline-static\"\n              label=\"Type some text to let AI finish your thought\"\n              multiline\n              rows={4}\n              fullWidth\n              placeholder=\"Type your input here...\"\n              variant=\"filled\"\n              onChange={onChangeInput}\n            />\n          </div>\n        </form>\n  )\n};\nexport default InputWindow;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nconst OutputWindow = ( {text} ) => {\n  return (\n        <form noValidate autoComplete=\"off\">           \n          <div>\n            <TextField\n              id=\"filled-multiline-static\"\n              label=\"Your output will show up here\"\n              multiline\n              rows={15}\n              fullWidth\n              variant=\"filled\"\n              disabled\n              value={text}\n            />\n          </div>\n        </form>\n  )\n};\nexport default OutputWindow;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst GenerateTextButton = ( {onButtonPress, loading} ) => {\n      return (\n        <div>\n            <Button \n            variant=\"contained\" \n            color=\"primary\"\n            onClick={onButtonPress}\n            disabled={loading}\n            >\n            Generate text\n            </Button>\n            { loading && <CircularProgress></CircularProgress> }\n        </div>\n      )\n};\nexport default GenerateTextButton;","\nimport './App.css';\nimport InputWindow from './Components/InputWindow';\nimport OutputWindow from './Components/OutputWindow';\nimport GenerateTextButton from './Components/GenerateTextButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport React, { useState } from 'react';\nconst App = () => {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n  const classes = useStyles();\n\n  const [input, setInput] = useState(\n    'input'\n  );\n  const [output, setOutput] = useState(\n    ''\n  );\n  const [loading, setLoading] = useState(\n    false\n  );\n\n  const [apikey, setApikey] = useState(\n    ''\n  );\n\n  const handleInput = event => setInput(event.target.value);\n  const handleApikey = event => setApikey(event.target.value);\n\n  const handleButton = () => {\n    setOutput('holdon');\n    // generate text logic here\n    // show loading indicator - using state\n    setLoading(true);\n    console.log(input);\n    //make api call\n    \n    const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"x-rapidapi-host\": \"gpt-text-generation.p.rapidapi.com\",\n          \"x-rapidapi-key\": apikey\n        },\n        body: JSON.stringify({\n          prompt: input,\n          temperature: 0.8\n        })\n    }\n    fetch(\"https://gpt-text-generation.p.rapidapi.com/completions?temperature=1&top_k=999&stream=false&seed=0\", requestOptions)\n    .then(response => response.json())\n    .then(data => setOutput(data.generation))\n    .then (() => setLoading(false))\n    .catch(err => {\n      setOutput('there was an error. oops!');\n      setLoading(false);\n    });\n    \n  }\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={3}>\n          <p>AI TextGen Demo</p>\n        </Grid>\n        <Grid item xs={9}>  \n        </Grid>\n        <Grid item xs={9}>\n          <InputWindow onChangeInput={handleInput}></InputWindow>\n        </Grid>\n        <Grid item xs={3}>\n          <p>Insert api key</p>\n          <input onChange={(e) => {handleApikey(e)}}></input>\n        </Grid>\n        <Grid item xs={9}>\n          <GenerateTextButton onButtonPress={handleButton} loading={loading}></GenerateTextButton>\n        </Grid>\n        <Grid item xs={3}>\n        </Grid>\n        <Grid item xs={9}>\n          <OutputWindow text={output}></OutputWindow>\n        </Grid>\n        <Grid item xs={3}>\n        </Grid>\n      </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}